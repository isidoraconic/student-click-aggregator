// Helpful links that explain what the gradle file is doing

plugins {
    // Build Java: https://docs.gradle.org/current/userguide/building_java_projects.html
    id 'java'

    // https://docs.gradle.org/current/userguide/pmd_plugin.html#header
    id 'pmd'

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'

    // https://docs.gradle.org/current/userguide/application_plugin.html
    id 'application'
}

group 'PDPCS5010'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-csv
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.8'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // minimum percentage of code coverage
                minimum = 0.3
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

pmd {
    ignoreFailures=true
    pmdTest.enabled=true
    ruleSets = [
            "category/java/bestpractices.xml",
            "category/java/errorprone.xml",
            "category/java/codestyle.xml"
            //"java-basic",
            //"java-braces",
            //"java-strings",
    ]
}

task docs(type: Javadoc) {
    source = sourceSets.main.allJava
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestReport.mustRunAfter test

task doAll {
    // Runs a java build.  Imported from the java plugin
    dependsOn build

    // Runs all the tests.  Imported from the java plugin.
    dependsOn test

    // Runs pmd. Imported by pmd plugin
    dependsOn check

    // Runs java doc. Imported from the java plugin
    dependsOn javadoc

    println 'all done!'
}

task debuggingGradle {
    dependsOn check
}

javadoc {
    doLast {
        println "file://$buildDir/docs/javadoc/index.html"
    }
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    doLast {
        println "file://$buildDir/jacocoHtml/index.html"
    }
}

mainClassName = 'concurrentSolution.ConcurrentDriver'

jar {
    manifest {
        attributes "Main-Class": "$mainClassName"
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it)}
    }
}